#!/bin/bash
declare -A config #initialize associated array (keys can be anything)
config=(
    [dotdir]="~/dotfiles/"
    [dotrc]="${config[dotdir]}/.bashrc"
    [soscheck]="1"
    [sonoclean]="0"
    [soconf]="~/speculo.conf"
)

HOSTNAME=${1}    
so_config_parse()
{
    while read line
    do
        if echo ${line} | grep -Fq "=" 
        then
            valname=$(echo "${line}" | cut -d '=' -f 1)
            config[$valname]=$(echo "${line}" | cut -d '=' -f 2-)
        fi
    done < ${config[soconf]}
}


if [[ ! $@ =~ \ -c\ && -e "${config[soconf]}" ]] # If -c isn't specified anywhere, import from default config if default file exists
then
    so_config_parse 
fi




plzhlp()
{
    cat <<EOF
    ${0} - Usage: 
    ${0} [-h] HOSTNAME [-c config.file] [-d dotfiles_dir] [-r ./rc_file] [-no]
        -c      Specify a different config file.  default: ./speculo.conf
        
        -h      Specify Hostname. If -h isn't supplied the FIRST positional argument is used
        
        -d      Specify a different dotfiles directory. default: ~/dotfiles/

        -r      Specify a different rc file for baash. default: ~/dotfiles/.bashrc

        -n      Don't remove dotfiles from remote server

        -o      Check OS before trying to rsync, restricts attempts to just Oracle Linux and CentOS machines, otherwise
                does basic SSH to system.
EOF
}

#Define options to be used with command
while getopts ':h:c:d:r:no' OPTION
do
        case $OPTION in
        c)      ${config[soconf]}=${OPTARG}
                so_config_parse
                ;;
        h)      HOSTNAME=${OPTARG}
                ;;
        d)      ${config[dotdir]}=${OPTARG}
                ;;
        r)      ${config[dotrc]}=${OPTARG}
                ;;
        n)      ${config[sonoclean]}=1
                ;;
        o)      ${config[soscheck]}=0
                ;;
        ?)      plzhlp
                exit 3
                ;;
        *)      printf "Unknown State" #What to do in unkown state
                plzhlp
                exit 3
                ;;
        esac
done



parallel_lines()
{
    pgrep -a $0 -u ${USER} | grep ${HOSTNAME} | grep -qv $$
}


rem_dotfiles()
{
    ssh ${HOSTNAME} -qt 'rm -r ${config[dotdir]}'
}

rem_routine()
{
    if rem_dotfiles
    then
        echo "Files removed!"
    elif rem_dotfiles
    then
        echo "Files removed after 2 tries."
    else
        echo "Could not remove dot files, please manually clean up"
    fi
}

spec_oscheck()
{
    # Exits 0 if system is Solaris, 1 if centos or oracle linux or 5 if other.
    if ssh -q ${HOSTNAME}  'cat /etc/release 2>/dev/null | grep -qi 'solaris''
    then
    CORE_EXIT=0
    elif ssh -q ${HOSTNAME} 'lsb_release -a' | grep -i 'Description' | grep -qEi 'centos|oracle linux'
    then
    CORE_EXIT=1
    else
    CORE_EXIT=5
    fi
}


spec_the_thing()
{
    rsync -r ${config[dotdir]} ${HOSTNAME}:~/${USER}_${config[dotdir]} &&\
    ssh ${HOSTNAME} -t "bash --rcfile ${config[dotrc]}" || echo -e "\e[31mFailed to SSH or Rsync to system!\e[m"
}


if $(exit ${config[soscheck]})
then 
    spec_oscheck
    if [[ CORE_EXIT == 0 ]]
    then
        
        echo "System is Solaris, default SSH used."
        ssh ${HOSTNAME}
   
    elif [[ CORE_EXIT == 1 ]]
    then    
        echo "System is CentOS or Oracle Linux, rsync starting..."
        spec_the_thing &&\
        
        if [[ ${config[sonoclean]} == 0 ]]
        then
            if parallel_lines
            then
                rem_routine
            else
                echo "Still logged in to ${HOSTNAME} elsewhere using ${0}, please log out and/or clean up manually!"
            fi    
        fi

    else
        echo "Unknown system, defualt SSH used."
        ssh ${HOSTNAME}
    fi
else
    spec_the_thing &&\

    if $( exit ${config[sonoclean]})
    then
        if parallel_lines
        then
            rem_routine
        else
            echo "Still logged in to ${HOSTNAME} elsewhere using ${0}, please log out and/or clean up manually!"
        fi
    fi
fi

